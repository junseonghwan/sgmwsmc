print(n) # yields negative values for n_a
# use wrong value for tc
tc <- 0.5
n<-compute_n(r, b, tc, psi)
print(n) # yields negative values for n_a
# use wrong value for tc
tc <- 1
n<-compute_n(r, b, tc, psi)
print(n) # yields negative values for n_a
# use wrong value for tc
tc <- 0.5
n<-compute_n(r, b, tc, psi)
print(n) # yields negative values for n_a
tc <- 0.75
# use wrong value for phi_v
tc <- 0.75
phi_v <- 0.5
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
n<-compute_n(r, b, tc, psi)
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
# use wrong value for phi_v
tc <- 0.75
phi_v <- 0.5
n<-compute_n(r, b, tc, psi)
n
tc
r
b
compute_n<-function(r, b, phi, psi)
{
n_a <- (psi * 2^(r) * (1 - b) - 2*(1 - phi)) / phi
n_b <- psi * 2^(r) * b / phi
return(cbind(n_a, n_b))
}
eps<-0.01
tc<-0.75
phi_v<-0.75
psi<-2
r<-rep(0, 5)
f<-rep(0, 5)
r[1:4]<-log2(2/2 + runif(4, -eps, eps))
f[1:4]<-3/8 + runif(4, -eps, eps)
r[5]<-log2(1/2 + runif(1, -eps, eps))
f[5]<-1/4 + runif(1, -eps, eps)
n<-compute_n(r, f, tc, psi)
print(n)
# estimate \bar{b}, \bar{b}_t
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
# use wrong value for tc
tc <- 0.5
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.1
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.2
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.4
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.3
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.9
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.75
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 1
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for tc
tc <- 0.3
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we find likelihood to infer tc?
# use wrong value for phi_v
tc <- 0.75
phi_v <- 0.5
n<-compute_n(r, f, tc, psi)
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
n<-compute_n(r, f, tc, psi)
print(n)
# estimate \bar{b}, \bar{b}_t
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
phi_v <- 0.5
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv) # over amplifies effective variant copy number
tc <- 0.3
n<-compute_n(r, f, tc, psi)
print(n) # yields negative values for n_a, can we build likelihood to infer tc?
print(bv)
bt
# use wrong value for phi_v
phi_v <- c(rep(0.75, 4) 0.5)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
# use wrong value for phi_v
phi_v <- c(rep(0.75, 4), 0.5)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
bv
print(b)
print(bt)
print(bv) # over amplifies effective variant copy number
bt
tc * bt
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
tc
tc<-0.75
phi_v<-rep(0.75, 5)
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
eps<-0.01
tc<-0.75
psi<-2
r<-rep(0, 5)
f<-rep(0, 5)
r[1:4]<-log2(2/2 + runif(4, -eps, eps))
f[1:4]<-3/8 + runif(4, -eps, eps)
r[5]<-log2(1/2 + runif(1, -eps, eps))
f[5]<-1/4 + runif(1, -eps, eps)
n<-compute_n(r, f, tc, psi)
print(n)
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
b <- n[,2] * tc
bt <- rowSums(n)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv)
# use wrong value for phi_v
phi_v <- c(rep(0.75, 4), 0.5)
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv) # over amplifies effective variant copy number
# use wrong value for phi_v
phi_v[5] <- 0.5
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv) # over amplifies effective variant copy number
rowSums(n)
c <- rowSums(n) + (1 - tc)*2
c
c <- tc * rowSums(n) + (1 - tc)*2
c
bv <- tc * n[,2] / phi_v
bv
tc
phi_v
n[,2]
tc
phi_v
print(bv)
print(b)
print(bt)
print(bv)
print(b)
print(n[,2])
print(bv)
print(c)
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc)*2
bv <- tc * n[,2] / phi_v
print(b)
print(n[,2])
print(bv)
print(c)
print(bv*phi_v)
print(n[,1]) # at
print(n[,2]) # bt
a <- n[,1] * tc + (1 - tc) * 2
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc) * 2
a
b
c
print(a)
print(b)
print(c)
print(a + b)
print((a + b) == c)
print((a + b) == c)
# average over the entire sample
print(a)
print(b)
print(c)
# average over the entire sample
print(a)
print(b)
print(c)
print(n[,1]) # at
print(n[,2]) # bt
print(bv)
print(bv*phi_v)
print(bv*phi_v == b) # b
print(bv) # bv
print(bv*phi_v == b)
print(bv) # bv
print(n[,1]) # at
print(n[,2]) # bt
print(bv) # bv
# use wrong value for phi_v
phi_v[5] <- 0.5
bv <- tc * bt / phi_v # \phi_v = tc in this case so bv = bt
bt
bv <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(b)
print(bt)
print(bv) # over amplifies effective variant copy number
print(bv) # over amplifies effective variant copy number
print(bv) # over amplifies effective variant copy number
print(bv * phi_v)
phi_v
bv
c
print(bv / c)
print(bv) # over amplifies effective variant copy number
print(bv / c)
print(bv / c)
c
# use wrong value for phi_v[5]
phi_v[5] <- 0.5
bv <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(bv) # over amplifies effective variant copy number
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
a <- n[,1] * tc + (1 - tc) * 2
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc) * 2
bv <- tc * n[,2] / phi_v
# average over the entire sample
print(a)
print(b)
print(c)
print((a + b) == c)
print(n[,1]) # at
print(n[,2]) # bt
print(bv) # bv == bt because phi_v = tc in this case
print(bv*phi_v == b)
print(bv) # bv == bt because phi_v = tc in this case
print(bv/c)
# use wrong value for phi_v[5]
phi_v[5] <- 0.5
bv <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(bv) # over amplifies effective variant copy number
print(bv/c)
phi_v<-rep(0.75, 5)
a <- n[,1] * tc + (1 - tc) * 2
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc) * 2
bv <- tc * n[,2] / phi_v
# average over the entire sample
print(a)
print(b)
print(c)
print((a + b) == c)
print(n[,1]) # at
print(n[,2]) # bt
print(bv) # bv == bt because phi_v = tc in this case
print(bv/c)
print(bv*phi_v == b)
# use wrong value for phi_v[5]
phi_v[5] <- 0.5
bv2 <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(bv2) # over amplifies effective variant copy number
print(bv2/c)
print(bv/c)
print(bv2/c)
print((bv/c)[5])
print((bv2/c)[5])
print(rowSums(n)) # ct
f[4]<-8/14 + runif(1, -eps, eps)
r[4]<-log2(6/2) + runif(1, -eps, eps)
r
f
n<-compute_n(r, f, tc, psi)
print(n)
3.25/0.75
r[4]<-log2(5.5/2) + runif(1, -eps, eps)
f[4]<-8/14 + runif(1, -eps, eps)
n<-compute_n(r, f, tc, psi)
print(n)
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
a <- n[,1] * tc + (1 - tc) * 2
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc) * 2
bv <- tc * n[,2] / phi_v
# average over the entire sample
print(a)
print(b)
print(c)
print((a + b) == c)
print(n[,1]) # at
print(n[,2]) # bt
print(rowSums(n)) # ct
print(bv) # bv == bt because phi_v = tc in this case
print(bv/c)
print(bv*phi_v == b)
# use wrong value for phi_v[5]
phi_v[5] <- 0.5
bv2 <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(bv2) # over amplifies effective variant copy number
print(bv) # bv == bt because phi_v = tc in this case
print(bv2) # over amplifies effective variant copy number
print((bv/c)[5])
print((bv2/c)[5])
# use wrong value for phi_v[5]
phi_v[4:5] <- 0.5
bv2 <- tc * n[,2] / phi_v # \phi_v = tc in this case so bv = bt
print(bv2) # over amplifies effective variant copy number
c
print(rowSums(n)) # ct
print(rowSums(n)) # ct
print(c)
at<-n[,1]
bt<-n[,2]
ct<-rowSums(n)
print(at)
print(bt)
print(ct)
phi_v * ct / c
phi_v
# estimate \bar{b}, \bar{b}_t
phi_v<-rep(0.75, 5)
a <- n[,1] * tc + (1 - tc) * 2
b <- n[,2] * tc
c <- tc * rowSums(n) + (1 - tc) * 2
bv <- tc * n[,2] / phi_v
at<-n[,1]
bt<-n[,2]
ct<-rowSums(n)
# average over the entire sample
print(a)
print(b)
print(c)
print((a + b) == c)
print(at)
print(bt)
print(ct)
print(bv) # bv == bt because phi_v = tc in this case
print(bv/c)
print(bv*phi_v == b)
phi_v * ct / c
? beta
lbeta(250, 1000)
c[5]
phi_v[5]
lbeta(250, 1000) * c[5] / phi_v[5]
? choose
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(phi_v[5])
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(0.5)
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(0.25)
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(0.1)
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(0.25)
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(phi_v[5])
lchoose(1000, 250) + lbeta(250, 1000) + log(c[5]) - log(0.25)
c[5]
lchoose(1000, 250) + lbeta(250-1, 1000-1) + log(c[5]/phi_v[5])
lchoose(1000, 250) + lbeta(250-1, 1000-1) + log(c[5]/phi_v[5])
lchoose(1000, 250) + lbeta(250-1, 1000-1) + log(c[5]/0.25)
print(bt)
c
c/seq(0.001, 1, 0.001)
xx<-seq(0.001, 1, 0.001)
plot(xx, c/xx, type='l')
xx
c
plot(xx, c[5]/xx, type='l')
c[5]
yy<-c[5]/xx
yy
xx<-seq(0.05, 1, 0.001)
yy<-c[5]/xx
plot(xx, yy, type='l')
abline(h=1)
c[5]/phi_v[5]
print(ct)
yy<-1/(xx-ct[5])^2
plot(xx, yy, type='l')
xx<-seq(ct[5]-0.5, ct[5]+0.5, 0.01)
yy<-1/(xx-ct[5])^2
plot(xx, yy, type='l')
dbeta(0.924411, 1, 0.2)
dbeta(0.188254, 1, 0.2)
dbeta(1, 1, 0.04)
xx<-rbeta(10000, 1, 0.04)
plot(density(xx))
plot(density(xx), type='l')
0.2^3
5*0.2^3
7.46211e+06
log(7.46211e+06)
dbeta(0.99999, 1, 0.25)
xx<-rbeta(10000, 1, 0.25)
hist(xx)
xx<-rbeta(10000, 1, 0.8^5)
hist(xx)
xx<-rbeta(10000, 1, 0.9^5)
hist(xx)
dbeta(0.99999, 1, 0.9^5)
dbeta(0.99999, 1, 0.9^10)
dbeta(0.99999, 1, 0.99^10)
exp(1000)
exp(100)
exp(200)
exp(300)
exp(400)
exp(500)
exp(600)
exp(700)
exp(800)
log(20000)
exp(100)
exp(10)
exp(20)
exp(20)
dbeta(0, 1, 1000000)
dbeta(0, 1, 10000000)
dbeta(0, 1, 100000000)
dbeta(0.010892427282839828, 1, 1)
dbeta(0.010892427282839828, 1, 1.2272264757599143)
log(dbeta(0.010892427282839828, 1, 1.2272264757599143))
hist(rbeta(100000, 1, 1.2272264757599143))
hist(rbeta(100000, 1, 3.7631357057657397))
hist(rbeta(100000, 1, 100))
hist(rbeta(100000, 1, 1000))
x<-matrix(scan(), ncol = 3, byrow = T)
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
6.65966, 0.381557, 0.947493
x<-matrix(scan(sep=","), ncol = 3, byrow = T)
cor(x[,1], x[,2])
x[,1]
dbinom(962, 995, 1.91259/1.98171, log=T)
dbinom(962, 995, 0.8*1.91259/1.98171, log=T)
dbinom(962, 995, 0.95*1.91259/1.98171, log=T)
dbinom(962, 995, 0.926283*1.91259/1.98171, log=T)
dbinom(962, 995, 0.926283*2.0647986621269476/1.98171, log=T)
dbinom(962, 995, 837437*2.0647986621269476/1.98171, log=T)
dbinom(962, 995, 0.837437*2.0647986621269476/1.98171, log=T)
hist(rbeta(10000, 3, 1))
hist(rbeta(10000, 3, 4))
hist(rbeta(10000, 3, 2))
hist(rbeta(10000, 2, 1))
hist(rbeta(10000, 2, 1))
hist(rbeta(10000, 9, 3))
hist(rbeta(10000, 2, 2))
hist(rbeta(10000, 2, 1))
hist(rbeta(10000, 1, 2))
setwd("/Users/seonghwanjun/Dropbox/Research/repo/sgmwsmc/data/pilot-20-boards-2019")
list.files(".", pattern = "enhanced_matching")
files<-list.files(".", pattern = "enhanced_matching")
file<-files[1]
x<-read.csv(file, header=T)
x
names(x)
colnames
